// Copyright 2023 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0


#pragma once

#include <moonray/rendering/shading/ispc/Shading.isph>
#include <scene_rdl2/common/platform/IspcUtil.isph>

enum NOISE_RotationOrders {
    NOISE_ROTATION_XYZ,
    NOISE_ROTATION_XZY,
    NOISE_ROTATION_YXZ,
    NOISE_ROTATION_YZX,
    NOISE_ROTATION_ZXY,
    NOISE_ROTATION_ZYX
};

enum NOISE_XformOrders {
    NOISE_XFORM_SRT,
    NOISE_XFORM_STR,
    NOISE_XFORM_RST,
    NOISE_XFORM_RTS,
    NOISE_XFORM_TSR,
    NOISE_XFORM_TRS
};

struct NOISE_Noise
{
    uniform int mSeed;
    uniform int mTableSize;
    uniform int * uniform mPermutationTable;
};

// Builds transformation matrix for noise shaders in the
// same way the Moonlight shaders did it.
varying Xform3f
NOISE_orderedCompose(const varying Vec3f &translation, 
                     const varying Vec3f &rotation, 
                     const varying Vec3f &scale, 
                     const uniform int transformationOrder, 
                     const uniform int rotationOrder);

// Retrieves a varying random value from the permutation table
varying int
NOISE_perm(const uniform NOISE_Noise * uniform n,
           const varying int i);

// Retrieves a uniform random value from the permutation table
uniform int
NOISE_perm(const uniform NOISE_Noise * uniform n,
           const uniform int i);

// Retrieves a random value from the permutation table
// calculated recursively from the three inputs
varying int
NOISE_index3D(const uniform NOISE_Noise * uniform n,
              const varying int ix,
              const varying int iy, 
              const varying int iz);

varying int
NOISE_index4D(const uniform NOISE_Noise * uniform n,
              const varying int ix,
              const varying int iy, 
              const varying int iz,
              const varying int iw);

